VALUABLE FUNCTIONS  
  // const handleReply = (commentId, newReply) => {
  //   const updatedComments = comments.comments.map((comment) =>
  //     comment.id === commentId
  //       ? { ...comment, replies: [...comment.replies, newReply] }
  //       : comment
  //   );

  //   // Update the comments data with the new reply
  //   const updatedcomments = { ...comments, comments: updatedComments };
  //   setComments(updatedcomments);
  // };

USE IN COMMENTS.JSX
       // handleReply={(newReply) => handleReply(comment.id, newReply)}

USE IN COMMENT.JSX
   // handleReply(newReply);











   NEXT TRIAL:
   
// const useNode = (currentUser) => {
//   // CREATE FIRST LEVEL COMMENT
//   const createNode = function (comments, content) {
//     // Generate a new comment object
//     const newComment = {
//       id: new Date().getTime().toString(),
//       content: content,
//       createdAt: new Date().toLocaleString(),
//       score: 0,
//       user: {
//         image: {
//           png: currentUser.image.png,
//           webp: currentUser.image.webp,
//         },
//         username: currentUser.username,
//       },
//       replies: [],
//     };

//     return [...comments, newComment];
//   };

//   // REPLY TO A COMMENT
//   const insertNode = function (comments, commentId, item) {
//     const newReply = {
//       id: new Date().getTime().toString(),
//       content: item,
//       createdAt: new Date().toLocaleString(),
//       score: 0,
//       user: {
//         image: {
//           png: currentUser.image.png,
//           webp: currentUser.image.webp,
//         },
//         username: currentUser.username,
//       },
//       replies: [],
//     };

//     const recurse = (comment) => {
//       console.log("Outside recurse:", comment);

//       const newComment = { ...comment };

//       console.log("Inside recurse:", newComment);
//       // If match, insert reply
//       if (comment.id === commentId) {
//         return {
//           ...comment,
//           replies: comment.replies
//             ? [...comment.replies, newReply]
//             : [newReply],
//         };
//       }

//       // Recursively call on replies array

//       if (comment.replies && comment.replies.length > 0) {
//         comment.replies = comment.replies.map(recurse);
//         // newComment.replies = comment.replies.map(recurse);
//       }

//       return comment;
//     };

//     // Make a copy of comments array
//     const updatedComments = [...comments];

//     // Map recurse helper over comments
//     return updatedComments.map(recurse);
//   };

//   return { createNode, insertNode };
// };

// export default useNode;




NEXT
  // const [commentsArray, setCommentsArray] = useState(() => {
  //   const storedData = localStorage.getItem("comments");
  //   return storedData ? JSON.parse(storedData) : commentsData;
  // });